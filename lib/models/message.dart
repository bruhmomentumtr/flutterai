// Default location: lib/models/message.dart
// Message model to represent chat messages in the application

enum MessageRole { user, assistant, system }

class Message {
  final String id;
  final MessageRole role;
  final String content;
  final DateTime timestamp;
  final String? imageUrl; // Optional image attachment
  final String? title; // Optional message title generated by AI
  final String sessionId; // Session ID to group messages

  Message({
    required this.id,
    required this.role,
    required this.content,
    required this.timestamp,
    this.imageUrl,
    this.title,
    required this.sessionId,
  });

  // Convert Message to JSON format for API requests
  Map<String, dynamic> toJson() {
    // If there's an image URL, we need special handling
    if (imageUrl != null && role == MessageRole.user) {
      // If content is empty, only send image
      if (content.trim().isEmpty) {
        return {
          'role': 'user',
          'content': [
            {
              'type': 'image_url',
              'image_url': {
                'url': imageUrl!,
                'detail': 'auto'
              }
            }
          ]
        };
      } else {
        // Both content and image exist
        return {
          'role': 'user',
          'content': [
            {'type': 'text', 'text': content},
            {
              'type': 'image_url',
              'image_url': {
                'url': imageUrl!,
                'detail': 'auto'
              }
            }
          ]
        };
      }
    }
    // Regular text message
    return {
      'role': role.toString().split('.').last,
      'content': content,
    };
  }

  // Create full JSON for storage
  Map<String, dynamic> toFullJson() {
    return {
      'id': id,
      'role': role.toString().split('.').last,
      'content': content,
      'timestamp': timestamp.millisecondsSinceEpoch,
      'imageUrl': imageUrl,
      'title': title,
      'sessionId': sessionId,
    };
  }

  // Create a Message from JSON response
  factory Message.fromJson(Map<String, dynamic> json) {
    return Message(
      id: json['id'] ?? DateTime.now().millisecondsSinceEpoch.toString(),
      role: _roleFromString(json['role']),
      content: json['content'],
      timestamp: json['timestamp'] != null 
          ? DateTime.fromMillisecondsSinceEpoch(json['timestamp']) 
          : DateTime.now(),
      imageUrl: json['image_url'] ?? json['imageUrl'],
      title: json['title'],
      sessionId: json['sessionId'] ?? 'default',
    );
  }

  // Helper method to convert string to MessageRole enum
  static MessageRole _roleFromString(String role) {
    switch (role) {
      case 'user':
        return MessageRole.user;
      case 'assistant':
        return MessageRole.assistant;
      case 'system':
        return MessageRole.system;
      default:
        return MessageRole.user;
    }
  }
} 