name: Build and Release Flutter APK

on:
  workflow_dispatch:

jobs:
  build-apk:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies for Flutter
        run: sudo apt-get update && sudo apt-get install -y curl unzip xz-utils zip libglu1-mesa apksigner

      - name: Download and install latest Flutter SDK
        run: |
          # 1. Flutter'ın sürüm bilgilerini içeren JSON dosyasının URL'sini tanımla
          RELEASES_URL="https://storage.googleapis.com/flutter_infra_release/releases/releases_linux.json"
          echo "Fetching release info from $RELEASES_URL"

          # 2. JSON'dan en son kararlı (stable) sürümün bilgilerini al
          #    - 'base_url': İndirme linkinin temel adresi
          #    - 'stable_hash': En son kararlı sürümün benzersiz kimliği (git hash)
          #    - 'archive_path': Bu hash'e ait olan sürümün indirme yolu
          BASE_URL=$(curl -s $RELEASES_URL | jq -r '.base_url')
          STABLE_HASH=$(curl -s $RELEASES_URL | jq -r '.current_release.stable')
          ARCHIVE_PATH=$(curl -s $RELEASES_URL | jq -r --arg HASH "$STABLE_HASH" '.releases[] | select(.hash == $HASH) | .archive')

          # 3. Tam indirme URL'sini oluştur
          DOWNLOAD_URL="$BASE_URL/$ARCHIVE_PATH"
          echo "Latest stable Flutter SDK download URL: $DOWNLOAD_URL"

          # 4. En son sürümü indir
          curl -o flutter.tar.xz "$DOWNLOAD_URL"

          # 5. Arşivden çıkar
          echo "Extracting Flutter SDK..."
          tar -xf flutter.tar.xz

          # 6. Flutter'ı PATH'e ekle
          echo "$PWD/flutter/bin" >> $GITHUB_PATH
          echo "Flutter SDK installed successfully."
      - name: Verify Flutter installation
        run: |
          flutter channel stable
          flutter upgrade
          flutter --version

      - name: Install Flutter dependencies
        run: flutter pub get

      - name: Keystore'u oluştur
        run: echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 -d > android/app/my-release-key.jks

      - name: Verify Keystore File Exists
        run: |
          ls -al android/app/my-release-key.jks
          ls -al android/app/ # List contents of android/app
          pwd # Print current working directory
          echo "Project Root Dir: ${{ github.workspace }}" # Print GitHub workspace (should be project root)

      - name: key.properties oluştur
        run: |
          echo "storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.ANDROID_KEYSTORE_ALIAS }}" >> android/key.properties
        shell: bash

      - name: Verify key.properties Exists and Content (Secrets Masked)
        run: |
          ls -al android/key.properties
          cat android/key.properties # Secrets will be masked in logs

      - name: Build APK (all platform)
        run: flutter build apk --release

      - name: APK imza sertifika bilgilerini göster
        run: |
          echo "----------- APK İMZA DETAYLARI -----------"
          apksigner verify --print-certs build/app/outputs/flutter-apk/app-release.apk
          echo " "
          echo "----------- RSA .dname BİLGİSİ -----------"
          unzip -p build/app/outputs/flutter-apk/app-release.apk META-INF/*.RSA > CERT.RSA
          keytool -printcert -file CERT.RSA

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v1.5.${{ github.run_number }}  # örnek: v12
          release_name: Release v1.5.${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Upload APK to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/app/outputs/flutter-apk/app-release.apk
          asset_name: app-release.apk
          asset_content_type: application/vnd.android.package-archive
